
Topics:

  1. State Management Tool,

    External library for state management using different reducers

    Install the package with ---> npm install @reduxjs/toolkit
    react-redux
    Chrome-Extension - redux-devtools

    Process:
      1. Store Setup with initial State and reducers
        for manipulation of the store 
          1. Store Setup
          2. Reducers to feeded to the store
          3. Actions to be executed on reducers
          4. Provide to the parent component
      2. Actions ()
      3. Reducers ()
      4. Consume the store values - Subscription
        hook in react-redux called as useSelector
      5. Dispatch --> action
         hook in react-redux called as useDispatch

  useReducer ( Redux like hook which help understanding redux )

  Large Applications uses Redux to Manage the 
    State, Actions, Data as a whole
  
  Example:
    Assume Gmail Application ( Doesn't Mean Gamil use Redux ) 
    uses a lot of components
      1. User ( mailid )
      2. Compose ( Subject, To, CC, BCC )
      3. Drafts ( Mail which is unfinished ) --> Drafts Count Increases
      4. Categories, Junk, Starred, Important, Chats.
    
    Also, Jira Board

    Above entities/features of application uses different types of Desgin, Interactions, States from minor/small frontend actions

    This case managing the state/data only with basic state( state, reducer, context) on inidividual components and passing the data to the required components is very difficult

    May lead to props drilling or more num of callbacks/re-renders

    So, 
    we use redux everywhere for state management in large applications

    everywhere redux should we use redux ?
    Ans: Depends on the size of the application & the Team's discussion and decision
  
    redux middleware and persistent ( preloadedState ) in storage

    storage:
      local storage
      session storage

Next session:

  2. Advanced:

    Optimization Techniques to Improve the performance

      memo:

      useCallback:
        to avoid un-necessary re-renders/rendering

      useMemo:
        https://react.dev/reference/react/useMemo
    
      lazy and suspense

  3. CSS Animations

  A simple app creation using Mock APIs
    Student Management Application

      2. simple success/failure alerts


Task:
  Day 28:
    https://docs.google.com/document/d/1XX6bLW3MsJUGbnxl_PKW5POFe55Zxo590V24GNeSChY/edit#heading=h.fyv6vm4v13li

    Use Redux concepts here







  

  
